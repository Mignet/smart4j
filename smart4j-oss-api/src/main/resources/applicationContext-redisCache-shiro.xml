<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <description>apache shiro配置[http://shiro.apache.org/web.html]</description>
    
	<!-- 默认的shiro权限过滤器 [core]  -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
       <!--  <property name="securityManager" ref="securityManager"/> -->
        <!-- <property name="loginUrl" value="/rest/page/login"/> 禁止登录-->
        <property name="loginUrl" value="/rest/index"/>
        <property name="successUrl" value="/rest/index"/>
        <property name="unauthorizedUrl" value="/rest/page/401"/>
        <property name="filterChainDefinitions">
            <value>
                <!-- 静态资源允许访问 -->
                /favicon.ico = anon
                /app/** = anon
                /assets/** = anon
                /druid/** = anon
                <!-- 登录允许访问 -->
                /rest/auth/login = anon
				/rest/log/** = anon
                /rest/image/captcha = anon
                <!-- Rest Api for Mobile-->
                /rest/api/** = app
                <!-- Open Api for Third Partner-->
                /rest/openapi/** = openapi
                <!-- 其他资源需要认证 -->
                /** = authc
            </value>
        </property>
        <property name="filters">
			<map>
				<entry key="app">
					<bean class="com.v5ent.xoss.filter.MobileAuthenticationFilter"></bean>
				</entry>
				<entry key="openapi">
					<bean class="com.v5ent.xoss.filter.OpenApiAuthenticationFilter"></bean>
				</entry>
			</map>
		</property>
    </bean>

    <!-- 自定义redis缓存管理器 -->  
    <bean id="redisCacheManager" class="com.v5ent.xoss.session.RedisCacheManager">  
        <property name="jedisCluster" ref="jedisCluster" />  
    </bean>

    <!-- 集群要求session能够共享，我们自定义RedisSessionDAO继承自AbstractSessionDAO，实现基于Redis对session的操作 -->
    <bean id="sessionDAO" class="com.v5ent.xoss.session.RedisSessionDAO">  
        <property name="jedisCluster" ref="jedisCluster" />  
    </bean> 

    <!-- 默认的会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
    	<!-- 重写sessionDAO -->
        <property name="sessionDAO" ref="sessionDAO"/>
        <!-- sessionIdCookie的实现,重写容器默认的JSESSIONID -->  
        <property name="sessionIdCookie" ref="shareSession" />
        <!-- 设置全局会话超时时间，默认30分钟(1800000) -->  
        <property name="globalSessionTimeout" value="1800000" />  
        <!-- 是否在会话过期后会调用SessionDAO的delete方法删除会话 默认true -->  
        <property name="deleteInvalidSessions" value="true" />  
        <!-- 会话验证器调度时间 -->  
        <property name="sessionValidationInterval" value="1800000" />  
        <!-- 定时检查失效的session -->  
        <property name="sessionValidationSchedulerEnabled" value="true" />  
    </bean>
    
     <!-- sessionIdCookie的实现,重写容器默认的JSESSIONID -->  
    <bean id="shareSession" class="org.apache.shiro.web.servlet.SimpleCookie">  
        <!-- cookie的name,对应的默认是 JSESSIONID -->  
        <constructor-arg name="name" value="SHAREJSESSIONID" />  
        <!-- jsessionId的path为 / 用于多个系统共享jsessionId -->  
        <property name="path" value="/" />  
        <property name="httpOnly" value="true"/>  
    </bean>  

    <!-- 默认的安全管理器 -->
    <!-- <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realms">
            <list>
                <ref bean="securityRealm"/>
            </list>
        </property>
        cacheManager,集合spring缓存工厂
        <property name="cacheManager" ref="shiroEhcacheManager" />
        重写缓存，让集群共享
        <property name="cacheManager" ref="redisCacheManager" />
        <property name="sessionManager" ref="sessionManager" />
    </bean> -->

    <!-- 默认的生命周期处理器 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>